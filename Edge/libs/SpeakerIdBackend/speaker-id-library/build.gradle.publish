// How to test:
// ./gradlew --no-daemon clean
// ./gradlew --no-daemon -console plain :speaker-id-library:assembleRelease
// ./gradlew --console=verbose :speaker-id-library:publishMavenPublicationToMavenRepository
// cat speaker-id-library/build/repo/com/caci/apollo/speaker_id_library/0.9.8/speaker_id_library-0.9.8.pom 


plugins {
    id 'com.android.library'
}

def ApolloEdgeLibVersion = '0.9.8'

apply plugin: 'com.kezong.fat-aar'
apply plugin: 'maven-publish'


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 2
        versionName ApolloEdgeLibVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        // Here's the version info:
        // see  https://developer.android.com/studio/publish/versioning
        archivesBaseName = "apollo-speakerId-library"
        versionName = android.defaultConfig.versionName
        setProperty("archivesBaseName", "${archivesBaseName}-$versionName")

        // Heres's parameter for unit test
        buildConfigField "String", "TEST_PARAM1", "\"$TEST_PARAM1\""
        buildConfigField "String", "TEST_PARAM2", "\"$TEST_PARAM2\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test:rules:1.2.0' //needed for permssion in unit test
    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    // Use below for transistive dependence
    embed project (':aars:vosk-android-0.3.17')
    implementation ('com.googlecode.json-simple:json-simple:1.1.1') {
        exclude group: 'junit', module: 'junit'
    }
    implementation 'com.google.code.gson:gson:2.8.5' // 2.8.6 causes illegal class
    implementation ("commons-io:commons-io:2.6")   // 2.8.0 BigIntegerCounter error
    implementation 'net.razorvine:pickle:1.1' // for pickle
}


// afterEvaluate {
//    publishToMavenLocal {
//         doLast {
//             println "hello1"
//             println "${projectDir}"
//             println "hello2"
//             println "$buildDir"
//             println "hello"
//             println "hello"
//             println "hello"
//             println "hello"
//             def pomFile = file("/home/HQ/tchang/.m2/repository/com/domain/name/1.0.0/name-1.0.0.pom")
//             if (!pomFile.exists()) {
//                 return
//             }
//             println "bye"
//             println "bye"
//             println "bye"

//             println pomFile.name
//             def xmlparser = new XmlParser()
//             Node node = xmlparser.parse(pomFile)
//             List dependencies = node.get("dependencies")
//             List target = new ArrayList<>()
//             dependencies.each { dependency ->
//                 dependency.each { element ->
//                                   List scope = element.get("scope")
//                                   scope.each { _scope ->
//                                                if (_scope.value().get(0) == "runtime") {
//                                                    if (!target.contains(element)) {
//                                                        target.add(element)
//                                                    }
//                                                }
//                     }
//                 }
//                 }
//             target.each { targetnode -> targetnode.parent().remove(targetnode) }
//             new XmlNodePrinter(new PrintWriter(new FileWriter(pomFile))).print(node)
//         }
//    }        
// }

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.caci.apollo' 
            artifactId 'speaker_id_library'
            version ApolloEdgeLibVersion
            artifact "$buildDir/outputs/aar/apollo-speakerId-library-$version-release.aar"

            //generate pom nodes for dependencies
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                println dependenciesNode
                
            configurations.implementation.allDependencies.each {
                    dependency ->
                    if (dependency.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        println dependency.group
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                    }
                }
            }
        }
    }
    //publish to filesystem repo
    repositories{
        maven {
            url "$buildDir/repo"
        }
    }
}


// version = ApolloEdgeLibVersion
// group = 'us.forcenex'
// apply plugin: 'maven-publish'

// publishing {
//     publications {
//         maven(MavenPublication) {
//             artifact("build/outputs/aar/apollo-speakerId-library-$version-release"+".aar") {
//                 extension 'aar'
//             }}}
//     repositories {
//         maven {
//             name 'nexus'
//             url "https://nexus.forcenex.us/repository/forcenexus-maven/"
//             credentials {
//                 username project.repoUser
//                 password project.repoPassword
//             }}}}

